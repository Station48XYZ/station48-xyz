/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all existing users
         * @description Returns an array of all known users.
         */
        get: operations["get-users"];
        put?: never;
        /**
         * Create a new user
         * @description Create a new user.
         */
        post: operations["create-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a user with the given username or unique id
         * @description Lookup the unique id or username of a user with the given username or unique id.
         *
         *     You must specify one of the query parameters in the request.
         */
        get: operations["get-user-lookup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for users with given nodes
         * @description Search for users with given nodes.
         *
         *     You must specify one of the query parameters in the request.
         */
        get: operations["get-user-search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{uniqueId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        /**
         * Get a users data
         * @description Get a user by unique id (UUID).
         */
        get: operations["get-user"];
        put?: never;
        post?: never;
        /**
         * Delete a user
         * @description Delete a user
         */
        delete: operations["delete-user"];
        options?: never;
        head?: never;
        /**
         * Update a users data
         * @description Update a user's data
         */
        patch: operations["patch-user"];
        trace?: never;
    };
    "/user/{uniqueId}/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        /**
         * Get a users nodes (permissions data)
         * @description Get a users nodes.
         */
        get: operations["get-user-nodes"];
        /**
         * Replace (set) a users nodes
         * @description Override the users nodes
         */
        put: operations["set-user-nodes"];
        /**
         * Add a node to a user
         * @description Add a single node to the user
         */
        post: operations["add-user-node"];
        /**
         * Remove nodes from a user
         * @description Delete some or all of the nodes from a user.
         */
        delete: operations["clear-user-nodes"];
        options?: never;
        head?: never;
        /**
         * Add multiple nodes to a user
         * @description Add multiple nodes to the user
         */
        patch: operations["add-user-nodes"];
        trace?: never;
    };
    "/user/{uniqueId}/meta": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        /**
         * Get a users metadata
         * @description Get a users metadata
         */
        get: operations["get-user-meta"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{uniqueId}/permission-check": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        /**
         * Run a permission check against a user
         * @description Run a permission check against a user
         */
        get: operations["get-user-permission-check"];
        put?: never;
        /**
         * Run a permission check against a user with custom query options
         * @description Run a permission check against a user with custom query options
         */
        post: operations["post-user-permission-check"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{uniqueId}/promote": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Promote a user along a track
         * @description Promote a user along a track
         */
        post: operations["user-promote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{uniqueId}/demote": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Demote a user along a track
         * @description Demote a user along a track
         */
        post: operations["user-demote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all existing groups
         * @description Get all known groups
         */
        get: operations["get-groups"];
        put?: never;
        /**
         * Create a new group
         * @description Create a new group.
         */
        post: operations["create-group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for groups with given nodes
         * @description Search for groups with given nodes.
         *
         *     You must specify one of the query parameters in the request.
         */
        get: operations["get-group-search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/{groupName}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        /**
         * Get a groups data
         * @description Get a group
         */
        get: operations["get-group"];
        put?: never;
        post?: never;
        /**
         * Delete a group
         * @description Delete a group
         */
        delete: operations["delete-group"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/{groupName}/nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        /**
         * Get a groups nodes (permissions data)
         * @description Get a groups nodes.
         */
        get: operations["get-group-nodes"];
        /**
         * Replace (set) a groups nodes
         * @description Override the groups nodes
         */
        put: operations["set-group-nodes"];
        /**
         * Add a node to a group
         * @description Add a single node to the group
         */
        post: operations["add-group-node"];
        /**
         * Remove nodes from a group
         * @description Delete some or all of the nodes from a group.
         *
         *     If the request body is empty, all nodes will be deleted.
         */
        delete: operations["clear-group-nodes"];
        options?: never;
        head?: never;
        /**
         * Add multiple Group Nodes
         * @description Add multiple nodes to the group
         */
        patch: operations["add-group-nodes"];
        trace?: never;
    };
    "/group/{groupName}/meta": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        /**
         * Get a groups metadata
         * @description Get the groups metadata
         */
        get: operations["get-group-meta"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/group/{groupName}/permission-check": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        /**
         * Run a permission check against a group
         * @description Run a permission check against a group
         */
        get: operations["get-group-permission-check"];
        put?: never;
        /**
         * Run a permission check against a group with custom query options
         * @description Run a permission check against a group with custom query options
         */
        post: operations["post-group-permission-check"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all existing tracks
         * @description Get all known tracks
         */
        get: operations["get-tracks"];
        put?: never;
        /**
         * Create a new track
         * @description Create a new track.
         */
        post: operations["create-track"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/track/{trackName}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A track name */
                trackName: components["parameters"]["trackName"];
            };
            cookie?: never;
        };
        /**
         * Get a tracks data
         * @description Get a track
         */
        get: operations["get-track"];
        put?: never;
        post?: never;
        /**
         * Delete a track
         * @description Delete a track
         */
        delete: operations["delete-track"];
        options?: never;
        head?: never;
        /**
         * Update a track
         * @description Update a track
         */
        patch: operations["patch-track"];
        trace?: never;
    };
    "/action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query actions
         * @description Query actions from the action logger.
         *
         *     If pageSize or pageNumber are specified, both must be specified.
         *     If neither are specified, no pagination will be used and all results will be returned.
         *
         */
        get: operations["get-actions"];
        put?: never;
        /**
         * Submit a new action
         * @description Submit a new action to the action logger.
         */
        post: operations["submit-action"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messaging/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Push an update via the messaging service
         * @description Push an update via the messaging service.
         */
        post: operations["messaging-push-update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messaging/update/{uniqueId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Push a user update via the messaging service
         * @description Push a user update via the messaging service.
         */
        post: operations["messaging-push-user-update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messaging/custom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a custom message via the messaging service
         * @description Send a custom message via the messaging service.
         */
        post: operations["messaging-custom-message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/log-broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to the LogBroadcastEvent
         * @description Subscribes to the LogBroadcastEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
         */
        get: operations["get-event-log-broadcast"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/post-network-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to the PostNetworkSyncEvent
         * @description Subscribes to the PostNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
         */
        get: operations["get-event-post-network-sync"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/post-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to the PostSyncEvent
         * @description Subscribes to the PostSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
         */
        get: operations["get-event-post-sync"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/pre-network-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to the PreNetworkSyncEvent
         * @description Subscribes to the PreNetworkSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
         */
        get: operations["get-event-pre-network-sync"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/pre-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to the PreSyncEvent
         * @description Subscribes to the PreSyncEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
         */
        get: operations["get-event-pre-sync"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/custom-message-receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to the CustomMessageReceiveEvent
         * @description Subscribes to the CustomMessageReceiveEvent using [Server-Sent Events (SSE)](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events)
         */
        get: operations["get-event-custom-message-receive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current health status of the app
         * @description Returns the current health status of the app
         */
        get: operations["get-health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Represents a LuckPerms "node".
         *
         *     Nodes encapsulate more than just permission assignments. Nodes are used to store data about inherited groups, as well as assigned prefixes, suffixes and meta values. */
        Node: {
            /** @example minecraft.command.ban */
            key: string;
            /** @enum {string} */
            type: "permission" | "regex_permission" | "inheritance" | "prefix" | "suffix" | "meta" | "weight" | "display_name";
            /** @default true */
            value: boolean;
            context: components["schemas"]["ContextSet"];
            /**
             * @description The instant the node will expire, in epoch seconds.
             * @example 1658428395
             */
            expiry?: number;
        };
        /** @description Represents a LuckPerms "node".
         *
         *     Nodes encapsulate more than just permission assignments. Nodes are used to store data about inherited groups, as well as assigned prefixes, suffixes and meta values. */
        NewNode: {
            /** @example minecraft.command.ban */
            key: string;
            /** @default true */
            value: boolean;
            context?: components["schemas"]["ContextSet"];
            /**
             * @description The instant the node will expire, in epoch seconds.
             * @example 1658428395
             */
            expiry?: number;
        };
        /** @description A context pair. */
        Context: {
            /** @example server */
            key: string;
            /** @example survival */
            value: string;
        };
        /**
         * ContextSet
         * @description A set of context pairs.
         */
        ContextSet: components["schemas"]["Context"][];
        /** Group */
        Group: {
            name: components["schemas"]["GroupName"];
            /** @example Admin */
            displayName?: string;
            weight?: number;
            nodes: components["schemas"]["NodeMap"];
            metadata: components["schemas"]["Metadata"];
        };
        /** Track */
        Track: {
            name: components["schemas"]["GroupName"];
            groups: components["schemas"]["GroupName"][];
        };
        /** NewGroup */
        NewGroup: {
            name: components["schemas"]["GroupName"];
        };
        /** NewTrack */
        NewTrack: {
            name: components["schemas"]["GroupName"];
        };
        /** User */
        User: {
            uniqueId: components["schemas"]["UniqueId"];
            /** @example Luck */
            username?: string;
            parentGroups?: components["schemas"]["GroupName"][];
            nodes: components["schemas"]["NodeMap"];
            metadata: components["schemas"]["Metadata"];
        };
        /** NewUser */
        NewUser: {
            uniqueId: components["schemas"]["UniqueId"];
            /** @example Luck */
            username: string;
        };
        /**
         * NodeMap
         * @description A map (array) of nodes.
         */
        NodeMap: components["schemas"]["Node"][];
        /**
         * Metadata
         * @description Metadata about a user or group.
         */
        Metadata: {
            meta: Record<string, never>;
            /** @example [Admin]  */
            prefix?: string;
            /** @example  [the great] */
            suffix?: string;
            /** @example default */
            primaryGroup?: string;
        };
        /**
         * Unique Id
         * Format: uuid
         * @description A player unique id (UUID)
         * @example c1d60c50-70b5-4722-8057-87767557e50d
         */
        UniqueId: string;
        /**
         * Name
         * @description A group name
         * @example admin
         */
        GroupName: string;
        /**
         * Name
         * @description A group name
         * @example staff
         */
        TrackName: string;
        /**
         * PermissionCheckResult
         * @description The result returned after running a permission check.
         */
        PermissionCheckResult: {
            /**
             * @example true
             * @enum {string}
             */
            result: "true" | "false" | "undefined";
            node?: components["schemas"]["Node"];
        };
        /**
         * PermissionCheckRequest
         * @description The request parameters for a permission check.
         */
        PermissionCheckRequest: {
            /**
             * @description The permission to check for
             * @example minecraft.command.ban
             */
            permission: string;
            queryOptions?: components["schemas"]["QueryOptions"];
        };
        /** QueryOptions */
        QueryOptions: {
            /**
             * @default contextual
             * @enum {string}
             */
            mode: "contextual" | "non_contextual";
            flags?: components["schemas"]["QueryFlags"];
            contexts?: components["schemas"]["ContextSet"];
        };
        /**
         * QueryFlags
         * @default [
         *       "resolve_inheritance",
         *       "include_nodes_without_server_context",
         *       "include_nodes_without_world_context",
         *       "apply_inheritance_nodes_without_server_context",
         *       "apply_inheritance_nodes_without_world_context"
         *     ]
         */
        QueryFlags: ("resolve_inheritance" | "include_nodes_without_server_context" | "include_nodes_without_world_context" | "apply_inheritance_nodes_without_server_context" | "apply_inheritance_nodes_without_world_context")[];
        /** Action */
        Action: {
            /**
             * @description The time when the action happened, defaults to the current time
             * @example 1658428395
             */
            timestamp?: number;
            /** @description Who performed the action */
            source: {
                uniqueId: components["schemas"]["UniqueId"];
                /** @example Luck */
                name: string;
            };
            /** @description Who/what was the action performed on */
            target: {
                uniqueId?: components["schemas"]["UniqueId"];
                /** @example Luck */
                name: string;
                /** @enum {string} */
                type: "user" | "group" | "track";
            };
            /**
             * @description A description of the action
             * @example permission set minecraft.command.ban true
             */
            description: string;
        };
        /**
         * PromotionResult
         * @description The result of promoting a user.
         */
        PromotionResult: {
            success: boolean;
            /**
             * @example success
             * @enum {string}
             */
            status: "success" | "added_to_first_group" | "malformed_track" | "end_of_track" | "ambiguous_call" | "undefined_failure";
            /** @example mvp */
            groupFrom?: string;
            /** @example vip */
            groupTo?: string;
        };
        /**
         * DemotionResult
         * @description The result of demoting a user.
         */
        DemotionResult: {
            success: boolean;
            /**
             * @example success
             * @enum {string}
             */
            status: "success" | "removed_from_first_group" | "malformed_track" | "not_on_track" | "ambiguous_call" | "undefined_failure";
            /** @example vip */
            groupFrom?: string;
            /** @example mvp */
            groupTo?: string;
        };
        /**
         * TrackRequest
         * @description A request to promote or demote a user along a track.
         */
        TrackRequest: {
            /** @example staff */
            track: string;
            context?: components["schemas"]["ContextSet"];
        };
        /** UserSearchResult */
        UserSearchResult: {
            uniqueId?: components["schemas"]["UniqueId"];
            results?: components["schemas"]["NodeMap"];
        };
        /** GroupSearchResult */
        GroupSearchResult: {
            name?: components["schemas"]["GroupName"];
            results?: components["schemas"]["NodeMap"];
        };
        /**
         * TemporaryNodeMergeStrategy
         * @description Controls how the implementation should behave when new temporary nodes are set that would otherwise conflict with existing entries.
         * @default none
         * @enum {string}
         */
        TemporaryNodeMergeStrategy: "add_new_duration_to_existing" | "replace_existing_if_duration_longer" | "none";
        /**
         * Health
         * @description The health status of the app
         */
        Health: {
            /** @description if the app is healthy */
            health: boolean;
            /** @description extra information about the healthcheck result */
            details: Record<string, never>;
        };
        /**
         * PlayerSaveResult
         * @description The result of an operation to save data about a player
         */
        PlayerSaveResult: {
            /** @description if the app is healthy */
            outcomes: components["schemas"]["PlayerSaveResultOutcome"][];
            /**
             * @description the previous username involved in the result (only applies for the username_updated outcome)
             * @example Luck
             */
            previousUsername?: string;
            /** @description the other unique ids involved in the result (only applies for the other_unique_ids_present_for_username outcome) */
            otherUniqueIds?: components["schemas"]["UniqueId"][];
        };
        /**
         * PlayerSaveResultOutcome
         * @description The statuses returned in a PlayerSaveResult
         * @enum {string}
         */
        PlayerSaveResultOutcome: "clean_insert" | "no_change" | "username_updated" | "other_unique_ids_present_for_username";
        /**
         * CustomMessage
         * @description A custom message to send via the messaging service
         */
        CustomMessage: {
            /** @example superranks:notifications */
            channelId: string;
            /** @example custom payload message goes here */
            payload: string;
        };
        /**
         * LogBroadcastEvent
         * @description Called when a log entry is about to be sent to notifiable players on the platform
         */
        LogBroadcastEvent: {
            entry: components["schemas"]["Action"];
            origin: components["schemas"]["LogBroadcastEventOrigin"];
        };
        /**
         * LogBroadcastEventOrigin
         * @description Represents where a log entry is from
         * @enum {string}
         */
        LogBroadcastEventOrigin: "local" | "local_api" | "remote";
        /**
         * SyncType
         * @description Represents the type of synchronisation task
         * @enum {string}
         */
        SyncType: "full" | "specific_user";
        /**
         * PostNetworkSyncEvent
         * @description Called after a network synchronisation task has been completed
         */
        PostNetworkSyncEvent: {
            syncId: components["schemas"]["UniqueId"];
            type: components["schemas"]["SyncType"];
            didSyncOccur: boolean;
            specificUserUniqueId?: components["schemas"]["UniqueId"];
        };
        /**
         * PostSyncEvent
         * @description Called after a full synchronisation task has been completed
         */
        PostSyncEvent: Record<string, never>;
        /**
         * PreNetworkSyncEvent
         * @description Called after a request for synchronisation has been received via the messaging service, but before it has actually been completed
         */
        PreNetworkSyncEvent: {
            syncId: components["schemas"]["UniqueId"];
            type: components["schemas"]["SyncType"];
            specificUserUniqueId?: components["schemas"]["UniqueId"];
        };
        /**
         * PreSyncEvent
         * @description Called just before a full synchronisation task runs
         */
        PreSyncEvent: Record<string, never>;
        /**
         * CustomMessageReceiveEvent
         * @description Called when a custom payload message is received via the messaging service
         */
        CustomMessageReceiveEvent: {
            /** @example superranks:notifications */
            channelId: string;
            /** @example custom payload message goes here */
            payload: string;
        };
    };
    responses: never;
    parameters: {
        /** @description A player unique id (UUID) */
        uniqueId: components["schemas"]["UniqueId"];
        /** @description A group name */
        groupName: components["schemas"]["GroupName"];
        /** @description A track name */
        trackName: components["schemas"]["TrackName"];
        /** @description The node merge strategy */
        temporaryNodeMergeStrategy: components["schemas"]["TemporaryNodeMergeStrategy"];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UniqueId"][];
                };
            };
        };
    };
    "create-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewUser"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerSaveResult"];
                };
            };
            /** @description User created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerSaveResult"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-user-lookup": {
        parameters: {
            query?: {
                /** @description The username to search for */
                username?: string;
                /** @description The unique id to search for */
                uniqueId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        uniqueId?: components["schemas"]["UniqueId"];
                        username?: string;
                    };
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-user-search": {
        parameters: {
            query?: {
                /** @description Search for nodes with a key equal to */
                key?: string;
                /** @description Search for nodes with a key starting with */
                keyStartsWith?: string;
                /** @description Search for meta nodes with a meta key equal to */
                metaKey?: string;
                /** @description Search for nodes with a type equal to */
                type?: "regex_permission" | "inheritance" | "prefix" | "suffix" | "meta" | "weight" | "display_name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSearchResult"][];
                };
            };
        };
    };
    "get-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-user": {
        parameters: {
            query?: {
                /** @description if only player data should be deleted */
                playerDataOnly?: boolean;
            };
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @example Luck */
                    username?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-user-nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeMap"];
                };
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "set-user-nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "add-user-node": {
        parameters: {
            query?: {
                /** @description The node merge strategy */
                temporaryNodeMergeStrategy?: components["parameters"]["temporaryNodeMergeStrategy"];
            };
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"];
            };
        };
        responses: {
            /** @description Ok - returns the updated nodes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeMap"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "clear-user-nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        /** @description Specify the nodes to be deleted.
         *
         *     If the request body is empty, all nodes will be deleted. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "add-user-nodes": {
        parameters: {
            query?: {
                /** @description The node merge strategy */
                temporaryNodeMergeStrategy?: components["parameters"]["temporaryNodeMergeStrategy"];
            };
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"][];
            };
        };
        responses: {
            /** @description Ok - returns the updated nodes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeMap"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-user-meta": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metadata"];
                };
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-user-permission-check": {
        parameters: {
            query: {
                /** @description The permission to check for */
                permission: string;
            };
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionCheckResult"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post-user-permission-check": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PermissionCheckRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionCheckResult"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "user-promote": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TrackRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromotionResult"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User or track doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "user-demote": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TrackRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DemotionResult"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User or track doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupName"][];
                };
            };
        };
    };
    "create-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewGroup"];
            };
        };
        responses: {
            /** @description Group created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-group-search": {
        parameters: {
            query?: {
                /** @description Search for nodes with a key equal to */
                key?: string;
                /** @description Search for nodes with a key starting with */
                keyStartsWith?: string;
                /** @description Search for meta nodes with a meta key equal to */
                metaKey?: string;
                /** @description Search for nodes with a type equal to */
                type?: "regex_permission" | "inheritance" | "prefix" | "suffix" | "meta" | "weight" | "display_name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupSearchResult"][];
                };
            };
        };
    };
    "get-group": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Group"];
                };
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-group": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-group-nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeMap"];
                };
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "set-group-nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "add-group-node": {
        parameters: {
            query?: {
                /** @description The node merge strategy */
                temporaryNodeMergeStrategy?: components["parameters"]["temporaryNodeMergeStrategy"];
            };
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"];
            };
        };
        responses: {
            /** @description Ok - returns the updated nodes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeMap"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "clear-group-nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        /** @description Specify the nodes to be deleted.
         *
         *     If the request body is empty, all nodes will be deleted. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "add-group-nodes": {
        parameters: {
            query?: {
                /** @description The node merge strategy */
                temporaryNodeMergeStrategy?: components["parameters"]["temporaryNodeMergeStrategy"];
            };
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewNode"][];
            };
        };
        responses: {
            /** @description Ok - returns the updated nodes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NodeMap"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-group-meta": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Metadata"];
                };
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-group-permission-check": {
        parameters: {
            query: {
                /** @description The permission to check for */
                permission: string;
            };
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionCheckResult"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "post-group-permission-check": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A group name */
                groupName: components["parameters"]["groupName"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PermissionCheckRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PermissionCheckResult"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Group doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackName"][];
                };
            };
        };
    };
    "create-track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NewTrack"];
            };
        };
        responses: {
            /** @description Track created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Track"];
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Track already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-track": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A track name */
                trackName: components["parameters"]["trackName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Track"];
                };
            };
            /** @description Track doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "delete-track": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A track name */
                trackName: components["parameters"]["trackName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Track doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "patch-track": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A track name */
                trackName: components["parameters"]["trackName"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    groups?: components["schemas"]["GroupName"][];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Track doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-actions": {
        parameters: {
            query?: {
                /** @description The number of actions to return on each page */
                pageSize?: number;
                /** @description The page to return */
                pageNumber?: number;
                /** @description Filter by source user unique id */
                source?: string;
                /** @description Filter by target user unique id */
                user?: string;
                /** @description Filter by target group name */
                group?: string;
                /** @description Filter by target track name */
                track?: string;
                /** @description Filter by search value in source name, target name or description. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        entries?: components["schemas"]["Action"][];
                        overallSize?: number;
                    };
                };
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "submit-action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Action"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing required information */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "messaging-push-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Messaging service not supported */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "messaging-push-user-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A player unique id (UUID) */
                uniqueId: components["parameters"]["uniqueId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Messaging service not supported */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "messaging-custom-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomMessage"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Messaging service not supported */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "get-event-log-broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": {
                        /** @enum {string} */
                        event: "message";
                        data: components["schemas"]["LogBroadcastEvent"];
                    }[];
                };
            };
        };
    };
    "get-event-post-network-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": {
                        /** @enum {string} */
                        event: "message";
                        data: components["schemas"]["PostNetworkSyncEvent"];
                    }[];
                };
            };
        };
    };
    "get-event-post-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": {
                        /** @enum {string} */
                        event: "message";
                        data: components["schemas"]["PostSyncEvent"];
                    }[];
                };
            };
        };
    };
    "get-event-pre-network-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": {
                        /** @enum {string} */
                        event: "message";
                        data: components["schemas"]["PreNetworkSyncEvent"];
                    }[];
                };
            };
        };
    };
    "get-event-pre-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": {
                        /** @enum {string} */
                        event: "message";
                        data: components["schemas"]["PreSyncEvent"];
                    }[];
                };
            };
        };
    };
    "get-event-custom-message-receive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": {
                        /** @enum {string} */
                        event: "message";
                        data: components["schemas"]["CustomMessageReceiveEvent"];
                    }[];
                };
            };
        };
    };
    "get-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Health"];
                };
            };
            /** @description Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Health"];
                };
            };
        };
    };
}
